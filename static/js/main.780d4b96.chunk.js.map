{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","role","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","Typewriter","value","onChange","event","target","rows","backgroundColor","disabled","length","newText","toUpperCase","showAlert","toLowerCase","split","i","charAt","substring","join","joinedWords","reverse","navigator","clipboard","writeText","filter","element","Alert","height","alert","class","message","defaultProps","App","setMode","setAlert","setTimeout","document","body","heading","options","autoStart","loop","deleteSpeed","onInit","typewriter","typeString","pauseFor","deleteChars","start","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.780d4b96.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n            </li> */}\r\n          \r\n\r\n          </ul>\r\n          \r\n          <div className=\"form-check form-switch\">\r\n            <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\r\n            <label className={`form-check-label text-${props.mode === 'light' ? 'dark' : 'light'}`} htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: 'Enter the title here'\r\n}\r\n\r\n\r\n","import React, { useState } from 'react'\r\n// import Typewriter from 'typewriter-effect';\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        // console.log('Uppercase is clicked: '+text)\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to uppercase!', 'success');\r\n    }\r\n    const handleLoClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to lowercase!', 'success');\r\n    }\r\n    const handleClrClick = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert('Cleared text!', 'success');\r\n    }\r\n    const handleCapClick = () => {\r\n        let newText = text.toLowerCase().split(' ');\r\n        for (let i = 0; i < newText.length; i++) {\r\n\r\n            newText[i] = newText[i].charAt(0).toUpperCase() + newText[i].substring(1);\r\n\r\n        }\r\n        setText(newText.join(' '));\r\n        props.showAlert('Capitalized first letters!', 'success');\r\n    }\r\n    const reversed = () => {\r\n        let splitWord = text.split(\"\");\r\n\r\n        let reverseWord = splitWord.reverse(\"\");\r\n        let joinedWords = reverseWord.join(\"\");\r\n        let newText = joinedWords\r\n\r\n        setText(newText);\r\n        props.showAlert('Reversed text!', 'success');\r\n    };\r\n\r\n    const handleCopy = () => {\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert('Copied text!', 'success');\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(' '))\r\n        props.showAlert('Removed extra spaces!', 'success');\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log('handleOnChange is clicked ' + text)\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const [text, setText] = useState('')\r\n    \r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{ color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                <h1> {props.Typewriter}</h1>\r\n                  \r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"mybox\" rows=\"5\"\r\n                        style={{ color: props.mode === 'light' ? 'black' : 'white', backgroundColor: props.mode === 'light' ? 'white' : '#13466e' }}></textarea>\r\n                </div>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-1  my-2\" onClick={handleUpClick}> Convert To Uppercase </button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-1 my-2\" onClick={handleLoClick}> Convert To Lowercase </button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-1 my-2\" onClick={handleClrClick}> Clear Text </button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-1 my-2\" onClick={handleCapClick}> Capitalize </button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-1 my-2\" onClick={reversed}> Reverse Text </button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-1\" onClick={handleCopy}> Copy Text </button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}> Remove Extra Space </button>\r\n            </div>\r\n            <div className=\"container my-2\" style={{ color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                <h2>Text Summary</h2>\r\n                <p>{text.split(/\\s/).filter((element) => { return element.length !== 0 }).length} words and {text.length} characters</p>\r\n                <p>{0.0032 * text.split(' ').filter((element) => { return element.length !== 0 }).length} minutes to read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length > 0 ? text : 'Enter something in the textbox above to preview it here.'}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n      <div style={{height:'50px'}}>\r\n      {props.alert &&  <div class=\"alert alert-primary\" role=\"alert\">\r\n        {props.alert.message}\r\n      </div>}\r\n      </div>\r\n    )\r\n}\r\n","\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport Typewriter from 'typewriter-effect';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n//   // Link\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert('Dark mode has been enabled!', 'success');\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light mode has been enabled!', 'success');\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title='TextUtils' mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-4\">\n          \n          {/* <Routes> */}\n            {/* <Route exact path='/about' element={<About mode={mode}/>} /> */}\n\n           \n            <TextForm heading=\"Try TextUtils - Word Counter, Character Counter, Remove Space\" \n            Typewriter={<Typewriter\n              options={{\n               \n                autoStart: true,\n                loop: true,\n                deleteSpeed: 20,\n              }}\n              onInit={(typewriter) => {\n                typewriter\n                .typeString(\"Try TextUtils -  \")\n                .pauseFor(1000)\n                .deleteChars(1)\n                .typeString(\"Word Counter\")\n                .pauseFor(1000)\n                .deleteChars(12)\n                .typeString(\"Character Counter\")\n                .pauseFor(1000)\n                .deleteChars(17)\n                .typeString(\"Remove Spaces\")\n                .pauseFor(1000)\n                .deleteChars(13)\n                .typeString(\"Capitalize First Letter\")\n                .pauseFor(1000)\n                .deleteChars(23)\n                .typeString(\"Remove Extra Spaces\")\n                .pauseFor(1000)\n                .deleteChars(19)\n                .typeString(\"Uppercase To Lowercase\")\n                .pauseFor(1000)\n                .deleteChars(22)\n                .typeString(\"Lowercase To Uppercase\")\n                .pauseFor(1000)\n                .deleteChars(22)\n                .start();\n                \n              }  }/> }\n            mode={mode} showAlert={showAlert} />\n\n          {/* </Routes> */}\n\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App  from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}